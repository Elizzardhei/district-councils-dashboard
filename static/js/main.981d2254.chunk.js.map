{"version":3,"sources":["components/SideBar.js","components/BoundariesMap.js","utils/features.js","components/MapboxMap.js","components/InfoCard.js","ui/theme/index.js","App.js","index.js"],"names":["withStyles","theme","root","display","appBar","width","concat","marginLeft","drawer","flexShrink","drawerPaper","content","flexGrow","padding","spacing","unit","toolbar","mixins","props","style","dcca","dc2019","undefined","dccaList","find","d","name","includes","react_default","a","createElement","Drawer_default","className","variant","anchor","classes","paper","features","map","feature","ListItem_default","key","properties","CACODE","href","ListItemText_default","primary","CNAME","React","Component","getAllFeaturesFromPoint","point","featuresArray","pt","turf","lng","lat","polygonProps","i","n","length","poly","geometry","coordinates","Object","objectSpread","year","split","MapboxMap","_this","this","_this$props","token","center","zoom","minZoom","styleID","mapLayers","onMapClicked","onMapPanned","color","mapConfig","container","mapboxgl","accessToken","Map","on","getStyle","hoveredStateId","forEach","layer","index","addSource","type","data","generateId","addLayer","id","source","layout","visibility","checked","paint","line-color","line-width","fill-color","fill-opacity","e","setFeatureState","hover","_this$map$getCenter","getCenter","toFixed","getZoom","prevProps","_this2","getLayer","setLayoutProperty","position","top","bottom","height","candiNumMapping","1","2","3","4","5","6","7","8","9","10","card","left","pos","marginBottom","electors","cacode","yearIndex","findIndex","o","parseInt","result","election","Fragment","Card_default","CardContent_default","Typography_default","gutterBottom","cname","ename","List_default","candidates","candi","alignItems","number","ListItemAvatar_default","Avatar_default","Person_default","cName","eName","secondary","vote","win","ListItemSecondaryAction_default","Star_default","createMuiTheme","palette","main","themeName","typography","useNextVariants","LONG","LAT","ZOOM","STYLE_ID","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","lastClick","lngLat","selectedDCCA","state","onYearBtnClicked","idx","toConsumableArray","dc2003","dc2007","dc2011","dc2015","open","currentYear","selectedYear","_this$state","_this$state$map","MuiThemeProvider_default","CssBaseline_default","AppBar_default","Toolbar_default","noWrap","components_MapboxMap","showPopUp","InfoCard","filter","yearButton","Button_default","onClick","backgroundColor","button","zIndex","withTheme","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.981d2254.chunk.js","sourcesContent":["import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst drawerWidth = 320;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3,\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n});\r\n\r\nconst SideBar = (props) => {\r\n  const { style, drawerPaper, dcca } = props\r\n\r\n  \r\n  const dc2019 = dcca !== undefined &&  dcca.dccaList !== undefined ? dcca.dccaList.find(d => d.name.includes('2019')) : null\r\n  \r\n  return (\r\n    <Drawer\r\n      className={style}\r\n      variant=\"permanent\"\r\n      anchor=\"left\"\r\n      classes={{\r\n        paper: drawerPaper,\r\n      }}\r\n    >\r\n    {dc2019 && dc2019.features.map(feature => \r\n    <ListItem key={feature.properties.CACODE} href=\"#\">\r\n    <ListItemText primary={`${feature.properties.CACODE} - ${feature.properties.CNAME}`} />\r\n  </ListItem>\r\n    )}\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles)(SideBar)","import React from 'react'\r\nimport { Map, View } from 'ol'\r\nimport { Group as LayerGroup, Tile as TileLayer, Vector as VectorLayer } from 'ol/layer'\r\nimport XYZ from 'ol/source/XYZ'\r\nimport GeoJSON from 'ol/format/GeoJSON'\r\nimport { Stroke, Fill, Style } from 'ol/style'\r\nimport { Vector as VectorSource } from 'ol/source'\r\nimport { click } from 'ol/events/condition'\r\nimport Select from 'ol/interaction/Select'\r\nimport dc2003 from '../data/DCCA_2003'\r\nimport dc2007 from '../data/DCCA_2007'\r\nimport dc2011 from '../data/DCCA_2011'\r\nimport dc2015 from '../data/DCCA_2015'\r\nimport dc2019 from '../data/DCCA_2019'\r\n\r\nclass BoundariesMap extends React.Component {\r\n\r\n  state = {\r\n    map: null,\r\n    selectedFeatures: [],\r\n    lastClick: null\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const { mapLayers } = this.props\r\n    console.log(mapLayers)\r\n    const red = [\r\n      new Style({\r\n        stroke: new Stroke({\r\n          color: 'red',\r\n          width: 1\r\n        }),\r\n        fill: new Fill({\r\n          color: 'rgba(255,255,255,0.1)'\r\n        })\r\n      })\r\n    ];\r\n\r\n    const blue = [\r\n      new Style({\r\n        stroke: new Stroke({\r\n          color: 'blue',\r\n          width: 1\r\n        }),\r\n        fill: new Fill({\r\n          color: 'rgba(255,255,255,0.1)'\r\n        })\r\n      })\r\n    ];\r\n\r\n    // const dc2015Layer = new VectorLayer({\r\n    //   source: new VectorSource({\r\n    //     features: (new GeoJSON()).readFeatures(dc2015)\r\n    //   }),\r\n    //   style: blue\r\n    // })\r\n\r\n    const dc2019Layer = new VectorLayer({\r\n      source: new VectorSource({\r\n        features: (new GeoJSON()).readFeatures(dc2019)\r\n      }),\r\n      style: red\r\n    })\r\n\r\n    let map = new Map({\r\n      target: this.refs.mapContainer,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new XYZ({\r\n            url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n          })\r\n        }), new LayerGroup({\r\n          layers: [\r\n            // dc2011Layer,\r\n            // dc2015Layer,\r\n            dc2019Layer\r\n          ]\r\n        })\r\n      ],\r\n      view: new View({\r\n        center: [114.1401483, 22.379149],\r\n        projection: 'EPSG:4326',\r\n        zoom: 11,\r\n      })\r\n    })\r\n\r\n    // select interaction working on \"click\"\r\n    let interaction = new Select({\r\n      condition: click,\r\n      multi: true\r\n    });\r\n\r\n\r\n    if (interaction !== null) {\r\n      map.addInteraction(interaction)\r\n      interaction.on('select', this.onFeatureSelected)\r\n    }\r\n\r\n    map.on('singleclick', (event) => {\r\n      this.setState({\r\n        lastClick: event.coordinate\r\n      })\r\n      console.log(this.state)\r\n    })\r\n\r\n    this.setState({\r\n      map,\r\n      interaction\r\n    })\r\n  }\r\n\r\n\r\n  onFeatureSelected = event => {\r\n    if (event.target.getFeatures().getLength() > 0) {\r\n      let features = event.target.getFeatures()\r\n      console.log(features)\r\n      if (event.target.getFeatures().getLength() > 3) features.clear()\r\n      this.setState({\r\n        selectedFeatures: features.getArray()\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props\r\n    return (\r\n      <React.Fragment>\r\n        <div ref=\"mapContainer\" style={classes}></div>\r\n      {this.state.selectedFeatures.map((feature, index) => \r\n        <li key={index}>\r\n        {feature.getProperties().CACODE}\r\n        {feature.getProperties().CANAME}\r\n        </li>\r\n      )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default BoundariesMap","import * as turf from '@turf/turf'\r\n\r\nexport const getAllFeaturesFromPoint = (point, featuresArray) => {\r\n    const pt = turf.point([point.lng, point.lat])\r\n    const result = featuresArray.map(feature => {\r\n        let polygonProps = {}\r\n        for (let i= 0, n = feature.features.length; i < n; i++) {\r\n            const poly = turf.multiPolygon(feature.features[i].geometry.coordinates)\r\n            if (turf.booleanPointInPolygon(pt, poly)) {\r\n                polygonProps = {...feature.features[i].properties}\r\n                break\r\n            }\r\n        }\r\n        return {\r\n            year: feature.name.split('_')[1],\r\n            ...polygonProps\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\n\r\nexport const getBoundingBox = data => {\r\n    var bounds = {}, coords, point, latitude, longitude;\r\n  \r\n    // We want to use the “features” key of the FeatureCollection (see above)\r\n    // data = data.features;\r\n  \r\n    // Loop through each “feature”\r\n    // for (var i = 0; i < data.length; i++) {\r\n  \r\n      // Pull out the coordinates of this feature\r\n      coords = data.geometry.coordinates[0];\r\n  \r\n      // For each individual coordinate in this feature's coordinates…\r\n      for (var j = 0; j < coords.length; j++) {\r\n  \r\n        longitude = coords[j][0];\r\n        latitude = coords[j][1];\r\n  \r\n        // Update the bounds recursively by comparing the current\r\n        // xMin/xMax and yMin/yMax with the coordinate\r\n        // we're currently checking\r\n        bounds.xMin = bounds.xMin < longitude ? bounds.xMin : longitude;\r\n        bounds.xMax = bounds.xMax > longitude ? bounds.xMax : longitude;\r\n        bounds.yMin = bounds.yMin < latitude ? bounds.yMin : latitude;\r\n        bounds.yMax = bounds.yMax > latitude ? bounds.yMax : latitude;\r\n      }\r\n  \r\n    // }\r\n  \r\n    // Returns an object that contains the bounds of this GeoJSON\r\n    // data. The keys of this object describe a box formed by the\r\n    // northwest (xMin, yMin) and southeast (xMax, yMax) coordinates.\r\n    return bounds;\r\n  }","import React, { Component } from 'react';\r\nimport mapboxgl from 'mapbox-gl'\r\nimport { getBoundingBox } from '../utils/features'\r\n\r\nclass MapboxMap extends Component {\r\n    componentDidMount() {\r\n        // set map properties\r\n        const { token, center, zoom, minZoom, styleID, mapLayers, onMapClicked, onMapPanned, color } = this.props\r\n\r\n        const mapConfig = {\r\n            container: 'map',\r\n            style: `mapbox://styles/${styleID}`,\r\n            center: center,\r\n            zoom: zoom,\r\n            minZoom: minZoom\r\n        };\r\n\r\n        mapboxgl.accessToken = token;\r\n        this.map = new mapboxgl.Map(mapConfig);\r\n\r\n        this.map.on('load', () => {\r\n            // Get the map style and set it in the state tree\r\n            const style = this.map.getStyle();\r\n            //   this.props.setStyle(style);\r\n\r\n            \r\n            let hoveredStateId = null;\r\n            let clickedStateId = null;\r\n\r\n            mapLayers.forEach((layer, index) => {\r\n                this.map.addSource(layer.name, {\r\n                    type: 'geojson',\r\n                    data: layer,\r\n                    generateId: true\r\n                    // When enabled, the feature.id property will be auto assigned based on its index in the features array, over-writing any previous values.\r\n                })\r\n\r\n                this.map.addLayer({\r\n                    id: `${layer.name}-lines`,\r\n                    type: 'line',\r\n                    source: layer.name,\r\n                    layout: {\r\n                        'visibility': layer.checked ? 'visible': 'none'\r\n                    },\r\n                    paint: {\r\n                        'line-color': color[index],\r\n                        'line-width': 2\r\n                    }\r\n                })\r\n\r\n                this.map.addLayer({\r\n                    id: `${layer.name}-highlight`,\r\n                    type: 'fill',\r\n                    source: layer.name,\r\n                    layout: {\r\n                        'visibility': 'visible'\r\n                    },\r\n                    paint: {\r\n                        \"fill-color\": color[index],\r\n                        \"fill-opacity\": [\"case\",\r\n                            [\"boolean\", [\"feature-state\", \"highlight\"], false],\r\n                            0.3,\r\n                            0\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                // this.map.on(\"click\", `${layer.name}-highlight`, function (e) {\r\n                //     if (clickedStateId) {\r\n                //         this.map.setFeatureState({ source: layer.name, id: clickedStateId }, { highlight: false });\r\n                //         clickedStateId = null;\r\n                //     }\r\n                //     clickedStateId = e.features[0].id;\r\n                //     this.map.setFeatureState({ source: layer.name, id: clickedStateId }, { highlight: true });\r\n    \r\n                    \r\n                //     let bounds = getBoundingBox(e.features[0])\r\n    \r\n                //     bounds = new mapboxgl.LngLatBounds(new mapboxgl.LngLat(bounds.xMin, bounds.yMin), new mapboxgl.LngLat(bounds.xMax, bounds.yMax));\r\n    \r\n                //     this.map.fitBounds(bounds, {\r\n                //         padding: 50,\r\n                //         maxZoom: 13.5\r\n                //     });\r\n    \r\n                // });\r\n\r\n            })\r\n\r\n            // map.addLayer({\r\n            //     id: '2019-lines',\r\n            //     type: 'line',\r\n            //     source: 'DCCA_2019',\r\n            //     layout: {\r\n            //         'visibility': 'visible'\r\n            //     },\r\n            //     paint: {\r\n            //         'line-color': 'rgba(255, 0, 0, 1)',\r\n            //         'line-width': 2\r\n            //     }\r\n            // });\r\n\r\n            // map.addLayer({\r\n            //     id: '2019-hovers',\r\n            //     type: 'fill',\r\n            //     source: 'DCCA_2019',\r\n            //     layout: {\r\n            //         'visibility': 'visible'\r\n            //     },\r\n            //     paint: {\r\n            //         \"fill-color\": \"#627BC1\",\r\n            //         \"fill-opacity\": [\"case\",\r\n            //             [\"boolean\", [\"feature-state\", \"hover\"], false],\r\n            //             0.3,\r\n            //             0\r\n            //         ]\r\n            //     }\r\n            // });\r\n\r\n            // map.addLayer({\r\n            //     id: '2019-highlight',\r\n            //     type: 'fill',\r\n            //     source: 'DCCA_2019',\r\n            //     layout: {\r\n            //         'visibility': 'visible'\r\n            //     },\r\n            //     paint: {\r\n            //         \"fill-color\": \"#ff0000\",\r\n            //         \"fill-opacity\": [\"case\",\r\n            //             [\"boolean\", [\"feature-state\", \"highlight\"], false],\r\n            //             0.3,\r\n            //             0\r\n            //         ]\r\n            //     }\r\n            // });\r\n\r\n            // When the user moves their mouse over the state-fill layer, we'll update the\r\n            // feature state for the feature under the mouse.\r\n            this.map.on(\"mousemove\", \"2019-hovers\", function (e) {\r\n                if (e.features.length > 0) {\r\n                    if (hoveredStateId) {\r\n                        this.map.setFeatureState({ source: 'DCCA_2019', id: hoveredStateId }, { hover: false });\r\n                    }\r\n                    hoveredStateId = e.features[0].id;\r\n                    this.map.setFeatureState({ source: 'DCCA_2019', id: hoveredStateId }, { hover: true });\r\n                }\r\n            });\r\n\r\n            // When the mouse leaves the state-fill layer, update the feature state of the\r\n            // previously hovered feature.\r\n            // this.map.on(\"mouseleave\", \"2019-hovers\", function () {\r\n            //     if (hoveredStateId) {\r\n            //         this.map.setFeatureState({ source: 'DCCA_2019', id: hoveredStateId }, { hover: false });\r\n            //     }\r\n            //     hoveredStateId = null;\r\n            // });\r\n\r\n            \r\n\r\n\r\n            this.map.on('mousemove', e => {\r\n                onMapClicked(e)\r\n            });\r\n\r\n            this.map.on('move', () => {\r\n                const { lng, lat } = this.map.getCenter();\r\n                onMapPanned(lng.toFixed(4), lat.toFixed(4), this.map.getZoom().toFixed(2))\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.mapLayers !== prevProps.mapLayers) {\r\n\r\n            const status = this.props.mapLayers.map(layer => {\r\n                return {\r\n                    name: layer.name,\r\n                    visibility: layer.checked ? 'visible' : 'none'\r\n                }\r\n            })\r\n\r\n            status.forEach(layer => {\r\n                if (this.map.getLayer(`${layer.name}-lines`)) {\r\n                    this.map.setLayoutProperty(`${layer.name}-lines`, 'visibility', layer.visibility)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='map'\r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                }}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MapboxMap","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Button from '@material-ui/core/Button'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport StarIcon from '@material-ui/icons/Star'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst styles = {\r\n    card: {    \r\n        width: '400px',\r\n        position: 'absolute',\r\n        top: '15%',\r\n        left: '100px'\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n}\r\n\r\n\r\nconst candiNumMapping = {\r\n        1: '①',\r\n        2: '②',\r\n        3: '③',\r\n        4: '④',\r\n        5: '⑤',\r\n        6: '⑥',\r\n        7: '⑦',\r\n        8: '⑧',\r\n        9: '⑨',\r\n        10: '⑩'\r\n}\r\n\r\nconst SimpleCard = props => {\r\n    const { classes, electors, dccaList, cacode } = props\r\n\r\n    const year = dccaList.length > 0 ? dccaList[0].name.split('_')[1] : ''\r\n    const yearIndex = dccaList.length > 0 ? electors.findIndex(o => o.year === parseInt(year)) : -1\r\n\r\n    const result = yearIndex > -1 ? electors[yearIndex].election.find(e => e.cacode === cacode) : false\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            {result && <Card className={classes.card}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                        {year} {result.cacode} \r\n                    </Typography>\r\n                    <Typography variant=\"h6\">\r\n                        {result.cname}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\">\r\n                        {result.ename}\r\n                    </Typography>\r\n                    <List>\r\n                    {\r\n                        result.candidates.map(candi => <ListItem alignItems=\"flex-start\" key={`${candi.number}`}>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <PersonIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`${candi.number > 0 ? candiNumMapping[candi.number] : ''} ${candi.cName} ${candi.eName}`}\r\n                                secondary={candi.vote > 0 ? `${candi.vote}票` : '自動當選'}\r\n                            />\r\n                            {candi.win &&\r\n                            <ListItemSecondaryAction>\r\n                                <StarIcon color=\"secondary\" />\r\n                            </ListItemSecondaryAction>}\r\n                        </ListItem>)\r\n\r\n                    }\r\n                </List>\r\n                </CardContent>\r\n            </Card>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nSimpleCard.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(SimpleCard)","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst palette = {\r\n  primary: { main: '#FF8F00' },\r\n  secondary: { main: '#00E676' }\r\n};\r\nconst themeName = 'Pizazz Spring Green Falcon';\r\n\r\nconst typography =  {\r\n  useNextVariants: true,\r\n}\r\n\r\nexport default createMuiTheme({ palette, themeName, typography });\r\n","import React, { Component } from 'react'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SideBar from './components/SideBar';\r\nimport BoundariesMap from './components/BoundariesMap'\r\nimport MapboxMap from './components/MapboxMap'\r\nimport InfoCard from './components/InfoCard'\r\nimport createMuiTheme from './ui/theme';\r\nimport DCCAElectionResult from './components/DCCAElectionResult'\r\nimport { getAllFeaturesFromPoint } from './utils/features'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport './App.css'\r\n\r\nimport dc2003 from './data/DCCA_2003'\r\nimport dc2007 from './data/DCCA_2007'\r\nimport dc2011 from './data/DCCA_2011'\r\nimport dc2015 from './data/DCCA_2015'\r\nimport dc2019 from './data/DCCA_2019'\r\nimport electors from './data/electors'\r\n\r\n\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst theme = createMuiTheme\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  yearButton: {\r\n    position: 'absolute',\r\n    width: 100,\r\n    top: '15%'\r\n  }\r\n});\r\n\r\nconst TOKEN = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\r\nconst LONG = 114.2029;\r\nconst LAT = 22.3844;\r\nconst ZOOM = 11;\r\nconst STYLE_ID = 'mapbox/streets-v9';\r\nconst MIN_ZOOM = 10;\r\n\r\nconst color = [\r\n  '#6e40e6',\r\n  '#f49600',\r\n  '#ff5d55',\r\n  '#005ecd',\r\n  '#ad0000'\r\n]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dccaList: [dc2003, dc2007, dc2011, dc2015, dc2019],\r\n      open: false,\r\n      map: {\r\n        center: [LONG, LAT],\r\n        zoom: ZOOM,\r\n        styleID: STYLE_ID,\r\n        lastClick: null\r\n      },\r\n      currentYear: \"2015\",\r\n      selectedYear: [\"2015\"],\r\n      selectedDCCA: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onYearBtnClicked('DCCA_2011')\r\n    this.onYearBtnClicked('DCCA_2015')\r\n    // this.props.actions.loadDCCAdata([dc2003, dc2007, dc2011, dc2015, dc2019])\r\n  }\r\n\r\n  onMapPanned = (lng, lat, zoom) => {\r\n    this.setState({\r\n      map: {\r\n        center: [lng, lat],\r\n        zoom,\r\n      }\r\n    })\r\n  }\r\n\r\n  onMapClicked = (e) => {\r\n    this.setState({\r\n      map: {\r\n        lastClick : [e.lngLat.lng, e.lngLat.lat]\r\n      },\r\n      selectedDCCA: getAllFeaturesFromPoint(e.lngLat, this.state.dccaList)\r\n    })\r\n  }\r\n\r\n  onYearBtnClicked = (name) => {\r\n    const idx = this.state.dccaList.findIndex(dcca => dcca.name === name)\r\n    let dccaList = [...this.state.dccaList]\r\n    dccaList.forEach(dcca => {dcca.checked = false})\r\n    dccaList[idx].checked = true\r\n    this.setState({ dccaList })\r\n  }\r\n\r\n  render() {\r\n    const { map: {center, zoom, lastClick}, selectedDCCA, currentYear, dccaList } = this.state\r\n    const { classes, map } = this.props\r\n\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n              District Council Dashboard\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          {dccaList &&\r\n            <MapboxMap\r\n              mapLayers={dccaList}\r\n              token={TOKEN}\r\n              center={center}\r\n              zoom={zoom}\r\n              showPopUp={true}\r\n              styleID={STYLE_ID}\r\n              minZoom={MIN_ZOOM}\r\n              color={color}\r\n              onMapClicked={this.onMapClicked}\r\n              onMapPanned={this.onMapPanned}\r\n            />}\r\n            <InfoCard \r\n            electors={electors}\r\n            dccaList={dccaList.filter(dcca => dcca.checked)}\r\n            cacode={selectedDCCA && selectedDCCA.find(feature => feature.year === currentYear).CACODE}\r\n            />\r\n            <div className={classes.yearButton}>\r\n              <List>\r\n                {dccaList.map((dcca, index) => <ListItem key={`${dcca.name}`}>\r\n                  <Button\r\n                    onClick={() => this.onYearBtnClicked(dcca.name)}\r\n                    key={dcca.name} variant=\"contained\"\r\n                    style={{\r\n                      backgroundColor: dccaList.findIndex(d => d.name === dcca.name && d.checked === true) > -1 ? color[index] : '#e0e0e0'\r\n                    }}\r\n                    className={classes.button}>\r\n                    {dcca.name.split('_')[1]}\r\n                  </Button>\r\n                </ListItem>)}\r\n              </List>\r\n            </div>\r\n        </main>\r\n      </div>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n      <App />,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n"],"sourceRoot":""}